import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
import asyncio

from config import TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
router = Router()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å—Ç–∞—Ç–µ–π
def parse_articles():
    url = "https://proit.ua/tag/articles/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    articles = soup.find_all('div', class_='site-post-card articles')[:5]
    
    parsed_articles = []
    for article in articles:
        try:
            title = article.find('a', class_='site-post-card-title').text.strip()
            author = article.find('div', class_='site-post-card-additional-info').a.span.text.strip()
            description = article.find('p', class_='site-post-card-text').text.strip()
            link_article_main = article.find('a', class_='site-post-card-img')['href']
            link_article = f'https://proit.ua{link_article_main}'
            date = article.find('div', class_='site-post-card-date').time.text.strip()
            
            parsed_articles.append({
                'title': title,
                'author': author,
                'description': description,
                'date': date,
                'link': link_article
            })
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
    
    return parsed_articles


@router.message(F.text == 'IT –ù–æ–≤–∏–Ω–∏')
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –∑ proit.ua\n–ù–∞–ø–∏—à–∏ /articles —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å—Ç–∞—Ç–µ–π")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /articles
@router.message(Command("articles"))
async def cmd_articles(message: Message):
    articles = parse_articles()
    
    if not articles:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    await message.answer(f"üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π. –ì–æ—Ç—É—é –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏...")
    
    for i, article in enumerate(articles, 1):
        try:
            article_text = (
                f"üìå <b>–°—Ç–∞—Ç—Ç—è #{i}</b>\n\n"
                f"üìö <b>–ù–∞–∑–≤–∞:</b> {article['title']}\n"
                f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {article['author']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {article['date']}\n\n"
                f"üìù <b>–û–ø–∏—Å:</b>\n{article['description']}\n\n"
                f"üîó <a href='{article['link']}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é</a>"
            )
            
            await message.answer(article_text, parse_mode="HTML")
            await asyncio.sleep(1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–∞—Ç—Ç—ñ #{i}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await router.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
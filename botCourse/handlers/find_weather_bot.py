from aiogram import Bot, Router, types, F
from aiogram.filters.command import Command
from aiogram.types import Message
import matplotlib.pyplot as plt
import asyncio
import requests
import logging
from io import BytesIO
from datetime import datetime, timedelta

from config import TOKEN

bot = Bot(TOKEN)
router = Router()

def generate_weather_chart(forecast_data):
    dates = []
    temps = []
    
    for day in forecast_data['list']:
        # –ë–µ—Ä–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–æ—á–æ–∫)
        if day['dt_txt'].endswith('12:00:00'):
            dates.append(day['dt_txt'][:10])
            temps.append(day['main']['temp'])
    
    plt.figure(figsize=(12, 6))
    plt.plot(dates, temps, marker='o', linestyle='-', color='tab:blue')
    plt.title('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    plt.grid(True)
    
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

@router.message(F.text == "–ü–æ–≥–æ–¥–∞ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ")
async def start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.')

@router.message(F.text)
async def get_weather(message: Message):
    city = message.text.strip()
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É
        current_url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
        current_data = requests.get(current_url).json()

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤
        forecast_url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
        forecast_data = requests.get(forecast_url).json()

        # –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞
        current_temp = current_data['main']['temp']
        feels_like = current_data['main']['feels_like']
        wind = current_data['wind']['speed']
        humidity = current_data['main']['humidity']
        description = current_data['weather'][0]['description']

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text_response = (
            f"–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C\n"
            f"ü§î –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C\n"
            f"üå¨ –í—ñ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
            f"‚òÅÔ∏è –û–ø–∏—Å: {description}\n\n"
            f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤:"
        )

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        chart_buffer = generate_weather_chart(forecast_data)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message.answer_photo(
            photo=types.BufferedInputFile(
                file=chart_buffer.getvalue(),
                filename='weather_forecast.png'
            ),
            caption=text_response
        )
        
    except KeyError:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ: {city}")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await router.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
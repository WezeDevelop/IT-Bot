import requests
import logging
from bs4 import BeautifulSoup
from aiogram import Bot, Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import asyncio

from config import TOKEN

bot = Bot(token=TOKEN)
router = Router()

parsed_jobs = []
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤–∞–∫–∞–Ω—Å—ñ–π
url = 'https://djinni.co/jobs/?primary_keyword=Python&exp_level=no_exp&employment=remote'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

jobs = soup.find_all('li', class_ = 'mb-4')[:7]
length = int(len(jobs))


for job in jobs:
                title = job.find('a', class_ = 'job-item__title-link').text.strip()
                job_link = job.find('a', class_ = 'job-item__title-link').get('href')
                link = f'https://djinni.co{job_link}'

                watched = job.find_all('span', class_ = 'text-nowrap')[0].text.strip()
                feedback = job.find_all('span', class_ = 'text-nowrap')[1].text.strip()
                info = f'{watched} {feedback}'
                data = job.find_all('span', class_ = 'text-nowrap')[2].text.strip()


                worked_for = job.find('div', class_ = 'fw-medium d-flex flex-wrap align-items-center gap-1') # –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å
                worked = worked_for.span.text
                region = worked_for.find('span', class_ = 'location-text').text

                description = job.find('span', class_ = 'js-truncated-text').text

                company = job.find('a', class_ = 'text-body js-analytics-event').text.strip()

                
                parsed_jobs.append({
                            'title': title,
                            'dependence': worked,
                            'company': company,
                            'information': info,
                            'address': region,
                            'description': description,
                            'date': data,
                            'link': link
                })

@router.message(F.text == 'IT –°—Ç–∞–∂—É–≤–∞–Ω–Ω—è')
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π –∑ Djinni.co\n\n"
                        "–ù–∞–ø–∏—à—ñ—Ç—å /interships —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ IT-–≤–∞–∫–∞–Ω—Å—ñ–π —É –ü–æ–ª—Ç–∞–≤—ñ")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /jobs
@router.message(Command("interships"))
async def cmd_jobs(message: Message):
    
    if not jobs:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å—ñ–π. –ì–æ—Ç—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
    
    for i, job in enumerate(parsed_jobs, 1):
        try:
            job_message = (
                        f"üíª <b>–†–æ–±–æ—Ç–∞:</b> #{i}\n"
                        f"üè¢ <b>–ö–æ–º–ø–∞–Ω—ñ—è:</b> {job['company']}\n"
                        f"üìä <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {job['information']}\n"
                        f"üíº <b>–ü–æ—Å–∞–¥–∞:</b> {job['title']}\n"
                        f"üí∞ <b>–ó–∞–π–Ω—è—Ç—ñ—Å—Ç—å:</b> {job['dependence']}\n"
                        f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {job['address']}\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {job['date']}\n\n"
                        f"üìù <b>–û–ø–∏—Å:</b>\n{job['description']}\n\n"
                        f"üîó <a href='{job['link']}'>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –Ω–∞ djinni.co</a>"
                        )
            await message.answer(job_message, parse_mode="HTML")
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó #{i}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await router.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())